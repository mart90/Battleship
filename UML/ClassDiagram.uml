@startuml
set namespaceSeparator ::
scale max 1900 width

MBRD::Game1 -up-|> Microsoft::Xna::Framework::Game
MBRD::Game1 --> MBRD::MBRDGame 
MBRD::Game1::GameState -right-> MBRD::GameState
MBRD::MBRDGame --> MBRD::Player
MBRD::MBRDGame --> MBRD::Boats::Factory::FleetFactory
MBRD::Boats::AbstractBoat --> MBRD::Boats::IBoat
MBRD::Boats::Fleet <-- MBRD::Player 
MBRD::Boats::AircraftCarrier --|> MBRD::Boats::AbstractBoat
MBRD::Boats::Battleship --|> MBRD::Boats::AbstractBoat
MBRD::Boats::Scout --|> MBRD::Boats::AbstractBoat
MBRD::Boats::Submarine --|> MBRD::Boats::AbstractBoat
MBRD::Boats::Fleet::add .up.> MBRD::Boats::AbstractBoat 

MBRD::Boats::Factory::FleetFactory ..> MBRD::Boats::Fleet
MBRD::Boats::Factory::FleetFactory -left-> MBRD::Boats::Factory::BoatFactory
MBRD::Boats::Factory::BoatFactory ..> MBRD::Boats::AircraftCarrier 
MBRD::Boats::Factory::BoatFactory ..> MBRD::Boats::Battleship 
MBRD::Boats::Factory::BoatFactory ..> MBRD::Boats::Scout 
MBRD::Boats::Factory::BoatFactory ..> MBRD::Boats::Submarine 

MBRD::Fragments::BoatFrament ..|> MBRD::Fragments::IFragment
MBRD::Fragments::WaterFrament ..|> MBRD::Fragments::IFragment

MBRD::Fragments::IFragment ..> Microsoft::Xna::Framework::Content::ContentManager
MBRD::Fragments::IFragment .up.> Microsoft::Xna::Framework::Graphics::SpriteBatch

MBRD::Grids::AbstractGrid ..> Microsoft::Xna::Framework::Content::ContentManager
MBRD::Grids::AbstractGrid ..> Microsoft::Xna::Framework::Graphics::SpriteBatch
MBRD::Grids::AbstractGrid ..> MBRD::Boats::AbstractBoat

MBRD::Grids::BoatGrid --|> MBRD::Grids::AbstractGrid
MBRD::Grids::FiringGrid --|> MBRD::Grids::AbstractGrid

class MBRD::MBRDGame {
  +Players : List<Player>

  +MBRDgame()
  +AddPlayer() : void
  +Initialize() : void
  +GenerateFleet() : void
  +Hit(int x, int y) : void
  +ShowFiringGrid(Player Player) : void
  +ShowBoatGrid(Player player) : void  
}

class MBRD::Player {
  +name : string 
  +color : string 
  +order : int 
  +boatGrid : BoatGrid 
  +firingGrid : FiringGrid 
  +fleet : Fleet

  +Player(newName : string, newColor : string, playerOrder : int)
  +addFleet(fleet : Fleet) : void 
}

class MBRD::Boats::Fleet {
  -boats : List<AbstractBoat>

  +Fleet()
  +Add(boat : AbstractBoat) : void 
}

interface MBRD::Boats::IBoat {
  +length : int 
  +frontImage : string 
  +midImage : string 
  +backImage : string 

  +Hit() : void
}

abstract class MBRD::Boats::AbstractBoat{
  +length : int 
  +frontImage : string 
  +midImage : string 
  +backImage : string 

  +AbstractBoat()
  +Create() : void 
  +{abstract} Hit() : void 
}

class MBRD::Boats::AircraftCarrier
class MBRD::Boats::Battleship
class MBRD::Boats::Scout
class MBRD::Boats::Submarine

class MBRD::Boats::Factory::BoatFactory {
  +GenerateBoat(length : int, frontImage : string, midImage : string, backImage : string)
  +GenerateDefaultAircraftCarrier() : AircraftCarrier 
  +GenerateDefaultBattleship() : Battleship 
  +GenerateDefaultSubmarine() : Submarine 
  +GenerateDefaultScout() : Scout 
}

class MBRD::Boats::Factory::FleetFactory {
  +GenerateFleet() : Fleet 
}

abstract class MBRD::Grids::AbstractGrid {
  +Width : int 

  +SetupTiles() : void
  +Draw(contentManager : ContentManager, spriteBatch : SpriteBatch)
  +DoesItFit(boat : AbstractBoat, fragments : List<Tuple<int, int>>) : bool
  +DoesItFit(boat : AbstractBoat, startX : int, startY : int, horizontal : bool) : bool
}

class MBRD::Grids::BoatGrid {
  +BoatGrid(width : int, height : int, tileSize : int, horizontalOffset : int, verticalOffset : int)
}

class MBRD::Grids::FiringGrid {
  +FiringGrid(width : int, height : int, tileSize : int, horizontalOffset : int, verticalOffset : int)
  +Fired(x : int, y : int) : void
}

class MBRD::Game1 {
  -graphics : GraphicsDeviceManager 
  -spriteBatch : SpriteBatch 
  -_game : MBRDGame 
  -startButton : Texture2D 
  -exitButton : Texture2D 
  -pauseButton : Texture2D 
  -resumeButton : Texture2D 
  -loadingScreen : Texture2D 
  -orbPosition : Vector2 
  -startButtonPosition : Vector2 
  -exitButtonPosition : Vector2 
  -resumeButtonPosition : Vector2 
  -OrbWidth : float = 50f
  -OrbHeight : float  = 50f
  -speed : float = 1.5f
  -isLoading : bool = false
  -mouseState : MouseState 
  -gameState : GameState 
  -previousMouseState : MouseState 
  -TargetWidth : int = 1600
  -TargetHeight : int = 1000

  +Game1()
  #Initialize() : void
  #LoadContent() : void
  #UnloadContent : void
  #Update(gameTime : GameTime) : void
  #Draw(gameTime : GameTime) : void
  #LoadGame() : void
  #MouseClicked(x : int, y : int) : void
}

interface MBRD::Fragments::IFragment {
  +Hit : bool 
  +location : Rectangle 

  +Draw(ContentManager contentManager, SpriteBatch spriteBatch) : void
}

class MBRD::Fragments::BoatFrament{
}
class MBRD::Fragments::WaterFrament {
}

enum MBRD::GameState {
 StartMenu
 Loading
 Playing
 Paused
}
@enduml